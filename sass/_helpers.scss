//
// MVC APPROACH
//

// Clearfix
@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

// Box Sizing
@mixin box-sizing($box-model) {
    -webkit-box-sizing: $box-model; // Safari <= 5
       -moz-box-sizing: $box-model; // Firefox <= 19
            box-sizing: $box-model;
}

// Border Radius
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    border-radius: $radius;
    background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

// Opacity
@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

// Center-align a block level element
@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// Text Overflow
@mixin text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// // Function for converting a px based font-size to rem.
@function calculateRem($size) {
    $remSize: $size / 15px;
    //Default font size on html element is 100%, equivalent to 15px;
    @return #{$remSize}rem;
  }
  
// Mixin that will include the fall back px declaration as well as the calculated rem value.
@mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
}

// Line height
@mixin line-height($heightValue: 12 ){
    line-height: $heightValue + px; //fallback for old browsers
    line-height: (0.125 * $heightValue) + rem;
}

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }  
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}

// Transition
@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}


// Transition Delay
@mixin transition-delay($args...) {
    -webkit-transition-delay: $args;
    -moz-transition-delay: $args;
    -ms-transition-delay: $args;
    -o-transition-delay: $args;
    transition-delay: $args;
  }

// Transform
@mixin transform($args...) {
    -webkit-transform: $args;
    -moz-transform: $args;
    -ms-transform: $args;
    -o-transform: $args;
    transform: $args;
  }

// Transition property
@mixin transition-property($property...) {
    -moz-transition-property:    $property;
    -o-transition-property:      $property;
    -webkit-transition-property: $property;
    transition-property:         $property;
}

// Transition duration
@mixin transition-duration($duration...) {
    -moz-transition-property:    $duration;
    -o-transition-property:      $duration;
    -webkit-transition-property: $duration;
    transition-property:         $duration;
}

// Vendor prefix
@mixin vendor-prefix($name, $argument... ) {
    -webkit-#{$name}: #{$argument};
    -ms-#{$name}: #{$argument};
    -moz-#{$name}: #{$argument};
    -o-#{$name}: #{$argument};
    #{$name}: #{$argument};
}

// Rotate
@mixin rotate($degrees) {
    -webkit-transform: rotate($degrees);
    -moz-transform: rotate($degrees);
    -ms-transform: rotate($degrees);
    -o-transform: rotate($degrees);
    transform: rotate($degrees);
}
// Vertical Align
@mixin vertical-align {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

// Un-Vertical Align
@mixin un-vertical-align {
    position: relative;
    top: inherit;
    -webkit-transform: inherit;
    -ms-transform: inherit;
    transform: inherit;
}

// Columns
@mixin column-count($value) {
	-moz-column-count: $value;
	-webkit-column-count: $value;
    -moz-columns: $value;
    column-count: $value;
}

@mixin column-fill($value) {
	-moz-column-fill: $value;
	-webkit-column-fill: $value;
	column-fill: $value;
}

@mixin column-gap($value) {
	-moz-column-gap: $value;
	-webkit-column-gap: $value;
	column-gap: $value;
}

@mixin column-rule($value) {
	-moz-column-rule: $value;
	-webkit-column-rule: $value;
	column-rule: $value;
}

@mixin column-span($value) {
	-moz-column-span: $value;
	-webkit-column-span: $value;
	column-span: $value;
}

@mixin column-width($value) {
	-moz-column-width: $value;
	-webkit-column-width: $value;
	column-width: $value;
}

@mixin columns($value) {
	-moz-columns: $value;
	-webkit-columns: $value;
	columns: $value;
}

@mixin column-overflow($value) {
	-moz-column-overflow: $value;
	-webkit-column-overflow: $value;
	column-overflow: $value;
}

@mixin break-before($value) {
    -moz-break-before: $value;
	-webkit-column-break-before: $value;
	break-before: $value;
}

@mixin break-after($value) {
	-moz-break-after: $value;
	-webkit-column-break-after: $value;
	break-after: $value;
}

@mixin break-inside($value) {
    -o-column-break-inside: $value;
    -ms-column-break-inside: $value;
	-moz-break-inside: $value;
	-webkit-column-break-inside: $value;
    break-inside: $value;
    column-break-inside: $value;
    page-break-inside: $value;
}


@mixin placeholder {    
    &.placeholder { @content; }    
    &:-moz-placeholder { @content; }    
    &::-moz-placeholder { @content; }    
    &:-ms-input-placeholder { @content; }    
    &::-webkit-input-placeholder { @content; }
}

@mixin selection {
    ::selection { @content; }
    ::-moz-selection { @content; }
}


@mixin scrollbar {
    &::-webkit-scrollbar {
        width: 10px;
    }
    &::-webkit-scrollbar-track {
        background: $c-white;
    }
    &::-webkit-scrollbar-thumb {
        background: $c-athens-gray;
    }
}

///
/// Viewport sized typography with minimum and maximum values
///
/// @author Eduardo Boucas (@eduardoboucas)
///
/// @param {Number}   $responsive  - Viewport-based size
/// @param {Number}   $min         - Minimum font size (px)
/// @param {Number}   $max         - Maximum font size (px)
///                                  (optional)
/// @param {Number}   $fallback    - Fallback for viewport-
///                                  based units (optional)
///
/// @example scss - 5vw font size (with 50px fallback), 
///                 minumum of 35px and maximum of 150px
///  @include responsive-font(5vw, 35px, 150px, 50px);
///

@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
    $responsive-unitless: $responsive / ($responsive - $responsive + 1);
    $dimension: if(unit($responsive) == 'vh', 'height', 'width');
    $min-breakpoint: $min / $responsive-unitless * 100;
    
    @media (max-#{$dimension}: #{$min-breakpoint}) {
      font-size: $min;
    }
    
    @if $max {
      $max-breakpoint: $max / $responsive-unitless * 100;
      
      @media (min-#{$dimension}: #{$max-breakpoint}) {
        font-size: $max;
      }
    }
    
    @if $fallback {
      font-size: $fallback;
    }
    
    font-size: $responsive;
  }


@mixin image-2x($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
            (-o-min-device-pixel-ratio: 2.6/2),
            (-webkit-min-device-pixel-ratio: 1.3),
            (min-device-pixel-ratio: 1.3),
            (min-resolution: 1.3dppx) {
        /* on retina, use image that's scaled by 2 */
        background-image: url($image);
        background-size: $width $height;
    }
}
  